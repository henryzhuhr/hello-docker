import{_ as e,c as i,o as a,a5 as t}from"./chunks/framework.B6CAAedu.js";const o="/hello-docker/assets/vscode-extension-docker-build-image-1.ceXSzUz1.png",n="/hello-docker/assets/vscode-extension-docker-build-image-2.nWO3qRBx.png",l="/hello-docker/assets/vscode-extension-docker-build-image-3.Dwexavod.png",p="/hello-docker/assets/vscode-extension-docker-build-image-4.DxFaAFKg.png",d="/hello-docker/assets/vscode-extension-docker-attach-vscode.D6IH2FQp.png",c="/hello-docker/assets/vscode-extension-docker-develop-in-container-1.hEX1w8o1.png",r="/hello-docker/assets/vscode-extension-docker-develop-in-container-2.DHViyS3g.png",s="/hello-docker/assets/vscode-extension-docker-develop-in-container-3.DPRDMLK9.png",h="/hello-docker/assets/vscode-open-remote.Cad1zqSt.png",k="/hello-docker/assets/vscode-devcontainers-open-config-file.BQRi9QCt.png",g="/hello-docker/assets/vscode-devcontainers-choose-where-config-file.DAOcg2e1.png",u="/hello-docker/assets/vscode-devcontainers-how-to-create.DWQClqjh.png",m="/hello-docker/assets/vscode-devcontainers-choose-base-image.SC5Y9foZ.png",F="/hello-docker/assets/vscode-devcontainers-addons.DaJ9RnAo.png",v="/hello-docker/assets/vscode-devcontainers-reopen-in-container.Bw4H2XSA.png",y="/hello-docker/assets/vscode-devcontainers-wait-creating-contrainer.BWeLzIJv.png",C="/hello-docker/assets/vscode-devcontainers-rebuild_container.Nak-xSN7.png",b="/hello-docker/assets/vscode-remote-develop-in-container.Dk91yURr.png",z=JSON.parse('{"title":"在 VSCode 使用 Docker 进行开发","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"develop-in-vscode.md","filePath":"develop-in-vscode.md","lastUpdated":1727788700000}'),E={name:"develop-in-vscode.md"},f=t('<h1 id="在-vscode-使用-docker-进行开发" tabindex="-1">在 VSCode 使用 Docker 进行开发 <a class="header-anchor" href="#在-vscode-使用-docker-进行开发" aria-label="Permalink to &quot;在 VSCode 使用 Docker 进行开发&quot;">​</a></h1><h2 id="安装插件" tabindex="-1">安装插件 <a class="header-anchor" href="#安装插件" aria-label="Permalink to &quot;安装插件&quot;">​</a></h2><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker" target="_blank" rel="noreferrer">Docker</a> for Visual Studio Code</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="noreferrer">Dev Containers</a></p></li></ul><h2 id="开发方式选择" tabindex="-1">开发方式选择 <a class="header-anchor" href="#开发方式选择" aria-label="Permalink to &quot;开发方式选择&quot;">​</a></h2><p>在 VSCode 中使用 Docker 进行开发，有两种方式：</p><p>第一种是仅依赖 <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker" target="_blank" rel="noreferrer">Docker</a> 插件进行开发，参考 <a href="#使用-dockfile-插件开发">“使用 Dockfile 插件开发</a> 部分，但是这种方式存在一定的缺点，在 <a href="#使用-dockfile-插件开发的缺点">“使用 Dockfile 插件开发的缺点</a> 部分</p><p>另外一种方式是基于 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="noreferrer">Dev Containers</a> 插件进行开发，参考 <a href="#使用-dev-containers-插件开发">“使用 Dev Containers 插件开发”</a> 部分，这种方式提供了更好的开发体验，但是需要进行一些配置</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>如果只是为了快速开发，可以跳过 <a href="#使用-dockfile-插件开发">“使用 Dockfile 插件开发</a> 部分，直接参考 <a href="#使用-dev-containers-插件开发">“使用 Dev Containers 插件开发”</a> 的步骤搭建开发环境</p></div><h2 id="使用-dockfile-插件开发" tabindex="-1">使用 Dockfile 插件开发 <a class="header-anchor" href="#使用-dockfile-插件开发" aria-label="Permalink to &quot;使用 Dockfile 插件开发&quot;">​</a></h2><p>首先我们需要编辑一个 <code>Dockerfile</code> 文件，可以放置在项目的根目录下，也可以放置在一个 <code>dockerfiles</code> 目录下，这里以放置在 <code>dockerfiles</code> 目录下为例</p><p>如果说你只需要一个操作系统的话，那么 <code>Dockerfile</code> 文件内容仅包含一行即可，如下：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:latest</span></span></code></pre></div><p>选择 Dockerfile 文件，右键选择 <code>Build Image</code> 构建镜像</p><p><img src="'+o+'" alt="" data-zoomable="true"></p><p>在弹出的对话框中输入镜像名称和标签，例如 <code>ubuntu-development:latest</code>，按下 <code>Enter</code> 键开始构建镜像</p><p><img src="'+n+'" alt="" data-zoomable="true"></p><p>在终端中可以看到构建过程，构建完成后会在左侧的 <code>Images</code> 中看到构建的镜像，这时候实际上运行的是 <code>docker build</code> 命令，因此也可以手动执行下面的命令构建镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dockerfiles/Dockerfile&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu-development:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dockerfiles&quot;</span></span></code></pre></div><p><img src="'+l+'" alt="" data-zoomable="true"></p><p>在左侧的 Docker 插件（小鲸鱼🐳图标）的 IMAGES 可以看到刚才构建的镜像，但是，然后这时候可以右键选择 <code>Run</code> 运行容器，实际上运行的是 <code>docker run</code> 命令，因此也可以手动执行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ubuntu-development:latest</span></span></code></pre></div><p><img src="'+p+'" alt="" data-zoomable="true"></p><p>但是，点击退出后发现无法开发，实际上没有将该容器进行守护运行，但是这个插件貌似不太支持这样操作，因此可以在终端中手动执行下面的命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu-development:latest</span></span></code></pre></div><p>执行后可以发现，容器(CONTAINER)出现了一个容器，这时候可以右键选择 <code>Attach Visual Studio Code</code></p><p><img src="'+d+'" alt="" data-zoomable="true"></p><p>然后就会弹出新窗口，这时候需要选择文件夹，就可以在容器中进行开发了</p><p><img src="'+c+'" alt="" data-zoomable="true"></p><p>可以看到，已经在容器环境中了，可以理解成远程开发，但是实际上是在本地的容器中开发</p><p><img src="'+r+'" alt="" data-zoomable="true"></p><p>和远程开发一样，需要把 VSCode 的插件安装到容器中，这时候可以在容器中安装插件，左侧选择 <code>Extensions</code>，然后在 <code>容器UBUNTU-DEVELOPMENT</code> 旁点击云朵图标，安装插件到容器中，就可以在容器内开发了</p><p><img src="'+s+`" alt="" data-zoomable="true"></p><p>不过这时候发现，其实本地开发的话，代码并不在容器中，因此需要在创建容器的时候挂载本地目录到容器中，这时候可以在 <code>docker run</code> 命令中添加 <code>-v</code> 参数挂载本地目录到容器中</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./:/root/project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ubuntu-development:latest</span></span></code></pre></div><p>然后重复上述的步骤，就可以在容器中开发了</p><h2 id="使用-dockfile-插件开发的缺点" tabindex="-1">使用 Dockfile 插件开发的缺点 <a class="header-anchor" href="#使用-dockfile-插件开发的缺点" aria-label="Permalink to &quot;使用 Dockfile 插件开发的缺点&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./:/root/project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu-development:latest</span></span></code></pre></div><p>这种方法存在一个问题，无法启动容器并进入容器，需要手动执行容器并守护运行，然后再手动进入容器，这样操作比较繁琐，因此可以使用 Dev Containers 插件进行开发，但是 Dev Containers 需要额外编辑一份 <code>docker-compose.yml</code> 文件，因此需要额外的配置，但是 Dev Containers 提供了更好的开发体验</p><h2 id="使用-dev-containers-插件开发" tabindex="-1">使用 Dev Containers 插件开发 <a class="header-anchor" href="#使用-dev-containers-插件开发" aria-label="Permalink to &quot;使用 Dev Containers 插件开发&quot;">​</a></h2><h3 id="安装插件-1" tabindex="-1">安装插件 <a class="header-anchor" href="#安装插件-1" aria-label="Permalink to &quot;安装插件&quot;">​</a></h3><p>VSCode 可以借助插件 <a href="https://vscode.github.net.cn/docs/devcontainers/containers" target="_blank" rel="noreferrer">Dev Containers</a> 开发</p><h3 id="使用-dev-containers-插件的过程" tabindex="-1">使用 Dev Containers 插件的过程 <a class="header-anchor" href="#使用-dev-containers-插件的过程" aria-label="Permalink to &quot;使用 Dev Containers 插件的过程&quot;">​</a></h3><blockquote><p>使用 Dev Containers 插件开发过程，可以参考官方文档 <a href="https://code.visualstudio.com/docs/devcontainers/create-dev-container" target="_blank" rel="noreferrer"><em>Create a development container using Visual Studio Code Remote Development</em></a></p></blockquote><h4 id="dockerfile-和-docker-compose-yml-文件" tabindex="-1">Dockerfile 和 docker-compose.yml 文件 <a class="header-anchor" href="#dockerfile-和-docker-compose-yml-文件" aria-label="Permalink to &quot;Dockerfile 和 docker-compose.yml 文件&quot;">​</a></h4><p>安装后，需要准备两个文件，分别是 <code>dockerfiles/Dockerfile</code> 和 <code>docker-compose.yml</code></p><p>如果说你只需要一个操作系统的话，那么 <code>Dockerfile</code> 文件内容仅包含一行即可，如下：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:latest</span></span></code></pre></div><p><code>docker-compose.yml</code> 文件内容如下</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ubuntu-dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      dockerfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dockerfiles/Dockerfile</span></span></code></pre></div><blockquote><p>文件内容含意这里不详细说明，下面会对此进行解释</p></blockquote><h4 id="打开容器配置文件" tabindex="-1">打开容器配置文件 <a class="header-anchor" href="#打开容器配置文件" aria-label="Permalink to &quot;打开容器配置文件&quot;">​</a></h4><p>点击VSCode （最）左下角「打开远程窗口」，弹出的命令中，点击「打开容器配置文件」</p><p><img src="`+h+'" alt="" data-zoomable="true"></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>在 VSCode 中键入 <code>Ctrl+Shift+P</code> 调出<strong>命令面板</strong> ，或者在菜单栏中选择 <code>查看(View)</code> -&gt; <code>命令面板(Command Palette)</code> 调出<strong>命令面板</strong></p></div><p>也可以在<strong>命令面板</strong>中搜索并执行命令 <code>Dev Containers: Open Container Configuration File</code> 打开容器配置文件</p><p><img src="'+k+'" alt="" data-zoomable="true"></p><p>（建议）在工作区级别添加配置文件（<code>.devcontainer/devcontainer.json</code>）来配置容器</p><p><img src="'+g+'" alt="" data-zoomable="true"></p><h4 id="决定创建容器的方式" tabindex="-1">决定创建容器的方式 <a class="header-anchor" href="#决定创建容器的方式" aria-label="Permalink to &quot;决定创建容器的方式&quot;">​</a></h4><p>接下来会选择 <code>如何创建容器</code></p><ul><li><p>【推荐】第一种方法：如果本地有 <code>Dockerfile</code> 或者 <code>docker-compose.yml</code> 文件，可以选择从这两个文件之一创建容器，因为我们编写了 <code>docker-compose.yml</code> 文件，因此选择 <code>From docker-compose.yml</code> 创建容器</p><p><img src="'+u+'" alt="" data-zoomable="true"></p></li><li><p>【不推荐】第二种方法：也可以选择 <code>来自预定义的容器配置定义</code> 构建容器（但是这样一来， <code>Dockerfile</code> 和 <code>docker-compose.yml</code> 就白写了）</p><p><img src="'+m+'" alt="" data-zoomable="true"></p></li></ul><p>在完成 <code>如何创建容器</code> 步骤之后，可以为容器添加额外的功能以便于开发，这些插件可以供开发使用，而不会被包含在 Dockerfile 中，因此不会对部署产生影响。</p><p>插件列表：<a href="https://containers.dev/features" target="_blank" rel="noreferrer"><em>Available Dev Container Features</em></a></p><p>例如在过程中需要获取一些其他仓库，可以添加 <code>Git</code> 和 <code>Git LFS</code> 插件</p><blockquote><p>如果是第一次参考本文创建开发环境，建议跳过这一步，等开发环境确定创建后再添加，以免出现问题</p></blockquote><p><img src="'+F+`" alt="" data-zoomable="true"></p><p>完成上述操作后，当前目录下会新增如下文件（文件的内容会随后说明）</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .devcontainer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> devcontainer.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # devcontainer 配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 额外的 docker-compose 配置文件 (自动生成)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .github</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dependabot.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 依赖检查配置文件 (生成可选)</span></span></code></pre></div><p>同时右下角会弹出提示，询问是否 <code>在容器中重新打开</code></p><p><img src="`+v+'" alt="" data-zoomable="true"></p><p>点击 <code>在容器中重新打开</code> 后，等待容器创建（需要🪄魔法或配置镜像源）</p><p><img src="'+y+`" alt="" data-zoomable="true"></p><p>随后会自动打开一个新的窗口，VSCode 会在容器中打开文件夹，可以在容器中开发</p><p>🎉 <strong>到此，就可以在容器中开发了</strong></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>在开发中可能会产生一些与开发相关的文件，建议添加到 <code>.gitignore</code> 文件中，以避免提交到仓库中</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># --- Dev Containers ---</span></span>
<span class="line"><span>.vscode-server/</span></span>
<span class="line"><span>.dotnet/</span></span>
<span class="line"><span>.cache/</span></span></code></pre></div></div><h4 id="修改配置文件并重新构建容器" tabindex="-1">修改配置文件并重新构建容器 <a class="header-anchor" href="#修改配置文件并重新构建容器" aria-label="Permalink to &quot;修改配置文件并重新构建容器&quot;">​</a></h4><p>从上述的步骤可以看出，只需要几个文件就可以在容器中开发，这里再次列出这几个文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .devcontainer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> devcontainer.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # devcontainer 配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 额外的 docker-compose 配置文件 (自动生成)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dockerfiles</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 镜像构建文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 镜像启动文件</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>❓ <strong>这里会有一个疑惑，为什么会有两个 <code>docker-compose.yml</code> 文件？</strong></p><p><code>docker-compose.yml</code> 是用来启动容器的，插件 Dev Containers 会根据该文件自动生成扩展文件 <code>.devcontainer/docker-compose.yml</code> 文件，扩展文件 <code>.devcontainer/docker-compose.yml</code> 文件可以配置一些开发相关的内容，例如挂载本地目录到容器中，这样就可以在容器中开发了</p><p>可以简单理解为：</p><ul><li>1️⃣ 如果需要开发，需要 <code>docker-compose.yml</code> 和扩展的一些配置，这些配置在 <code>.devcontainer/docker-compose.yml</code> 文件中，两个文件共同构成了「开发环境」</li><li>2️⃣ 当开发完成后，只需要 <code>docker-compose.yml</code> 文件即可部署应用，而可以不依赖开发扩展的配置文件 <code>.devcontainer/docker-compose.yml</code> 文件，这样就可以快速启动而不需冗余的配置，因此 <code>docker-compose.yml</code> 文件是「部署环境」</li><li>3️⃣ 例如，Git 插件可能只存在与开发过程中，而在部署时并不需要，因此可以在 <code>.devcontainer/docker-compose.yml</code> 文件中配置，这样就可以在开发时使用，而在部署时不会被包含在镜像中</li></ul></div><p>可以注意到刚才启动开发容器的新窗口，打开的目录是 <code>/workspaces/hello-docker</code>，这就是 devcontainer 配置文件 <code>.devcontainer/devcontainer.json</code> 的 <code>workspaceFolder</code> 选项指定的路径，可以修改该选项来指定打开的目录</p><p>如果希望将当前工作目录挂在到 <code>/root/project</code> 中，并且打开的目录为 <code>/root/project</code>，需要修改两个文件</p><ul><li><strong>修改 <code>.devcontainer/devcontainer.json</code></strong></li></ul><p>修改该文件的 <code>workspaceFolder</code> 选项，可以指定打开的目录</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .devcontainer/devcontainer.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Existing Docker Compose (Extend)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dockerComposeFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;../docker-compose.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;docker-compose.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ubuntu-dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;workspaceFolder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/workspaces/\${localWorkspaceFolderBasename}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;workspaceFolder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/root/\${localWorkspaceFolderBasename}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,       </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postCreateCommand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat /etc/os-release&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>\${localWorkspaceFolderBasename}</code> 是 VSCode 中的变量，表示当前工作目录的基本名称，例如 <code>hello-docker</code>，<code>/root/\${localWorkspaceFolderBasename}</code> 表示将当前工作目录挂载到 <code>/root/hello-docker</code> 中</p></blockquote><ul><li><strong>修改 <code>.devcontainer/docker-compose.yml</code> 文件</strong></li></ul><p>修改该文件的 <code>volumes</code> 参数，将当前工作目录挂载到 <code>/root</code> 中</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .devcontainer/docker-compose.yml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.8&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ubuntu-dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">..:/workspaces:cached</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">..:/root:cached</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sleep infinity</span></span></code></pre></div><blockquote><ul><li><code>volumes</code> 选项用来挂载本地目录到容器中，<code>..</code> 表示上级目录，<code>/workspaces</code> 表示挂载到容器中的目录，<code>cached</code> 表示缓存，可以提高性能</li><li><code>command: sleep infinity</code> 是一个非常重要的参数，表示容器启动后执行 <code>sleep infinity</code> 命令，保持容器一直运行，否则在容器启动后会立即退出，使得远程连接到容器的过程报错</li></ul></blockquote><p>如果修改了 <code>Dockerfile</code> 或者 <code>docker-compose.yml</code> ，或者上述的配置修改后，需要重启容器以使得修改生效</p><p>以在<strong>命令面板</strong>中选择 <code>Dev Container: Rebuild Container</code> 重建容器，推荐 <code>Without Cache</code>（不适用缓存）选项重新构建容器，以确保修改生效</p><p><img src="`+C+'" alt="" data-zoomable="true"></p><p>等待构建完成后就可以看到，当前打开的目录已经是 <code>/root/project</code> 了，并且工程文件已经挂在到了容器中，可以在容器中开发了</p><p><img src="'+b+'" alt="" data-zoomable="true"></p><p>和远程开发一样，需要把 VSCode 的插件安装到容器中，这时候可以在容器中安装插件，左侧选择 <code>Extensions</code>，然后在 <code>容器UBUNTU-DEVELOPMENT</code> 旁点击云朵图标，安装插件到容器中，就可以在容器内开发了</p><p><img src="'+s+`" alt="" data-zoomable="true"></p><p>到此为止，就可以很丝滑地在容器中开发了，与本地开发并无二致，也不需要安装操作系统了</p><p>接下来就该详细说明一下配置文件的内容了</p><h4 id="配置文件说明" tabindex="-1">配置文件说明 <a class="header-anchor" href="#配置文件说明" aria-label="Permalink to &quot;配置文件说明&quot;">​</a></h4><p>配置文件 <code>.devcontainer/devcontainer.json</code> 的细节可以参考 <a href="https://containers.dev/implementors/templates/" target="_blank" rel="noreferrer"><em>Dev Container Templates reference</em></a> 文档</p><p>下面是一些可能会常用的配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 停止后</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;shutdownAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stopCompose&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-label="Permalink to &quot;资料&quot;">​</a></h2><ul><li><a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu" target="_blank" rel="noreferrer">Docker — 从入门到实践</a> (<a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noreferrer">github</a>)</li><li><a href="https://dockertips.readthedocs.io/en/latest" target="_blank" rel="noreferrer">Docker Tips (Docker笔记)</a> (<a href="https://www.docker.tips" target="_blank" rel="noreferrer">永久域名</a>)</li><li><a href="https://code.visualstudio.com/docs/devcontainers/create-dev-container" target="_blank" rel="noreferrer"><em>Create a development container using Visual Studio Code Remote Development</em></a>：使用 Dev Containers 插件进行开发的官方文档</li><li><a href="https://containers.dev/implementors/templates/" target="_blank" rel="noreferrer"><em>Dev Container Templates reference</em></a>：Dev Containers 配置文件的细节文档</li><li><a href="https://code.visualstudio.com/docs/devcontainers/tutorial#_how-it-works" target="_blank" rel="noreferrer"><em>Dev Containers tutorial: How it works</em></a>：Dev Containers 插件的工作原理</li></ul>`,104),B=[f];function D(_,q,x,A,S,P){return a(),i("div",null,B)}const V=e(E,[["render",D]]);export{z as __pageData,V as default};
